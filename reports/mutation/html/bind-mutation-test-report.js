document.querySelector('mutation-test-report-app').report = {"files":{"/home/leon.ormes/Documents/git/retrier/src/Ipolicy.ts":{"language":"typescript","mutants":[{"id":"2","location":{"end":{"column":4,"line":19},"start":{"column":49,"line":14}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"3","location":{"end":{"column":30,"line":17},"start":{"column":29,"line":17}},"mutatorName":"ArithmeticOperator","replacement":"/","status":"Killed"},{"id":"4","location":{"end":{"column":4,"line":22},"start":{"column":17,"line":20}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"5","location":{"end":{"column":4,"line":28},"start":{"column":14,"line":23}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"6","location":{"end":{"column":40,"line":24},"start":{"column":9,"line":24}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"7","location":{"end":{"column":40,"line":24},"start":{"column":9,"line":24}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"8","location":{"end":{"column":26,"line":24},"start":{"column":25,"line":24}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Killed"},{"id":"9","location":{"end":{"column":26,"line":24},"start":{"column":25,"line":24}},"mutatorName":"EqualityOperator","replacement":">=","status":"Killed"},{"id":"10","location":{"end":{"column":6,"line":26},"start":{"column":42,"line":24}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"11","location":{"end":{"column":18,"line":25},"start":{"column":14,"line":25}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed"},{"id":"13","location":{"end":{"column":4,"line":31},"start":{"column":18,"line":29}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"15","location":{"end":{"column":4,"line":44},"start":{"column":49,"line":39}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"14","location":{"end":{"column":22,"line":30},"start":{"column":5,"line":30}},"mutatorName":"UpdateOperator","replacement":"this.retryCount--","status":"Killed"},{"id":"17","location":{"end":{"column":4,"line":47},"start":{"column":17,"line":45}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"18","location":{"end":{"column":4,"line":53},"start":{"column":14,"line":48}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"12","location":{"end":{"column":17,"line":27},"start":{"column":12,"line":27}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"20","location":{"end":{"column":40,"line":49},"start":{"column":9,"line":49}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"16","location":{"end":{"column":30,"line":42},"start":{"column":29,"line":42}},"mutatorName":"ArithmeticOperator","replacement":"/","status":"Killed"},{"id":"19","location":{"end":{"column":40,"line":49},"start":{"column":9,"line":49}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"21","location":{"end":{"column":26,"line":49},"start":{"column":25,"line":49}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Killed"},{"id":"23","location":{"end":{"column":6,"line":51},"start":{"column":42,"line":49}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"22","location":{"end":{"column":26,"line":49},"start":{"column":25,"line":49}},"mutatorName":"EqualityOperator","replacement":">=","status":"Killed"},{"id":"24","location":{"end":{"column":18,"line":50},"start":{"column":14,"line":50}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed"},{"id":"26","location":{"end":{"column":4,"line":56},"start":{"column":18,"line":54}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"25","location":{"end":{"column":17,"line":52},"start":{"column":12,"line":52}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"27","location":{"end":{"column":22,"line":55},"start":{"column":5,"line":55}},"mutatorName":"UpdateOperator","replacement":"this.retryCount--","status":"Killed"}],"source":"interface Ipolicy {\n  maxTime: number;\n  maxTries: number;\n  currentWait: () => number;\n  canRetry: () => boolean;\n  incrementTry: () => void;\n}\n\nexport class ConstantPolicy implements Ipolicy {\n  public maxTries: number;\n  public maxTime: number;\n  private initWaitTime: number;\n  private retryCount: number;\n  constructor(maxTries = 5, initWaitTime = 500) {\n    this.maxTries = maxTries;\n    this.initWaitTime = initWaitTime;\n    this.maxTime = maxTries * initWaitTime;\n    this.retryCount = 0;\n  }\n  currentWait() {\n    return this.initWaitTime;\n  }\n  canRetry() {\n    if (this.retryCount < this.maxTries) {\n      return true;\n    }\n    return false;\n  }\n  incrementTry() {\n    this.retryCount++;\n  }\n}\n\nexport class ExpoPolicy implements Ipolicy {\n  public maxTries: number;\n  public maxTime: number;\n  private initWaitTime: number;\n  private retryCount: number;\n  constructor(maxTries = 5, initWaitTime = 500) {\n    this.maxTries = maxTries;\n    this.initWaitTime = initWaitTime;\n    this.maxTime = maxTries * initWaitTime;\n    this.retryCount = 0;\n  }\n  currentWait() {\n    return Math.pow(this.initWaitTime, this.retryCount);\n  }\n  canRetry() {\n    if (this.retryCount < this.maxTries) {\n      return true;\n    }\n    return false;\n  }\n  incrementTry() {\n    this.retryCount++;\n  }\n}\n"},"/home/leon.ormes/Documents/git/retrier/src/retryer.ts":{"language":"typescript","mutants":[{"id":"0","location":{"end":{"column":2,"line":5},"start":{"column":40,"line":1}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1","location":{"end":{"column":4,"line":4},"start":{"column":7,"line":2}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"}],"source":"export function retryer(fn: () => any) {\n  try {\n    return fn();\n  } catch (error) {}\n}\n"}},"schemaVersion":"1.0","thresholds":{"break":null,"high":80,"low":60}};